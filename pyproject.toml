[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "windsurf-dreambooth"
version = "0.1.0"
description = "DreamBooth Studio - A modular application for fine-tuning and generating images with Diffusion models"
requires-python = ">=3.9"

# All dependencies are explicitly listed with version constraints for:
# 1. Security - avoid known vulnerabilities in older versions
# 2. Compatibility - ensure all packages work together
# 3. Reproducibility - consistent environments across installations
# 4. Stability - avoid breaking changes from major version updates
dependencies = [
    "torch",
    "torchvision",
    "setuptools",
    "fastapi",
    "uvicorn[standard]",
    "diffusers",
    "transformers",
    "accelerate",
    "python-multipart",
    "pillow",
    "numpy",
    "gradio",
    "huggingface-hub",
    "loguru",
    "sentencepiece",
    "protobuf",
    "psutil",
    "pydantic",
    "pydantic-settings",
    "python-dotenv",
    "xformers; sys_platform == 'linux'",
    "safetensors",
    "tqdm",
    "requests",
    "filelock",
    "typing-extensions",
    "pyyaml",
    "packaging",
    "regex",
    "tokenizers",
    # scipy, matplotlib, pandas, scikit-learn are installed as dependencies of other packages
    # tensorboard is optional for training visualization
    "httpx",
    "websockets",
    "aiofiles",
    "jinja2",
    "markupsafe",
    "click",
    "rich",
    "typer",
    "watchdog"
]

[project.optional-dependencies]
dev = [
    # Testing framework
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "pytest-timeout",
    "pytest-xdist",
    "pytest-env",
    "pytest-benchmark",
    "pytest-sugar",
    "hypothesis",
    "factory-boy",
    "freezegun",
    "responses",
    "faker",

    # Code quality tools
    "ruff",
    "mypy",
    "types-requests",
    "types-pyyaml",
    "types-python-dateutil",

    # Development tools
    "pre-commit",
    "ipython",
    "ipdb",
    "jupyter",
    "notebook",

    # Documentation
    "sphinx",
    "sphinx-rtd-theme",
    "sphinx-autodoc-typehints",
    "myst-parser",

    # Security scanning
    "bandit",
    "safety",

    # Performance profiling
    "py-spy",
    "memory-profiler",
    "line-profiler"
]

[tool.uv.sources]
torch = [
  { index = "pytorch-cpu", marker = "sys_platform != 'linux'" },
  { index = "pytorch-cu128", marker = "sys_platform == 'linux'" },
]
torchvision = [
  { index = "pytorch-cpu", marker = "sys_platform != 'linux'" },
  { index = "pytorch-cu128", marker = "sys_platform == 'linux'" },
]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu128"
url = "https://download.pytorch.org/whl/cu128"
explicit = true

# Exclude non-package directories to avoid multiple-package discovery
[tool.setuptools.packages.find]
exclude = ["outputs", "outputs.*", "frontend", "frontend.*", "finetuned_models", "finetuned_models.*", "uploads", "uploads.*", "model_cache", "model_cache.*"]

[tool.ruff]
# Ruff replaces black, isort, and flake8
line-length = 100
target-version = "py39"
extend-include = ["*.ipynb"]

# Exclude common directories
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".tox",
    ".mypy_cache",
    ".pytest_cache",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable pycodestyle, pyflakes, isort, and more
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "RUF",   # Ruff-specific rules
    "PTH",   # flake8-use-pathlib
    "ERA",   # flake8-eradicate (commented code)
    "PL",    # pylint
    "PERF",  # performance anti-patterns
    "D",     # pydocstyle (docstring conventions)
]

# Ignore specific rules
ignore = [
    "E501",   # Line too long (handled by formatter)
    "PLR0913", # Too many arguments
    "PLR0912", # Too many branches
    "PLR2004", # Magic value comparisons (common in tests)
    "TID252",  # Relative imports (we use them intentionally)
    "B008",   # Function calls in argument defaults (needed for Gradio)
    "E722",   # Bare except (sometimes needed)
    "S101",   # Assert usage (needed in tests)
    "N802",   # Function name lowercase (for some APIs)
    "N803",   # Argument name lowercase (for some APIs)
    "PERF203", # try-except in loop (sometimes necessary)
    "C901",   # Complex function (sometimes unavoidable)
    "PLR0915", # Too many statements
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in __init__
    "D203",   # 1 blank line required before class docstring (conflicts with D211)
    "D213",   # Multi-line docstring summary should start at the second line (conflicts with D212)
]

# Exclude additional patterns
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]  # Allow unused imports
"tests/*" = ["S101", "PLR2004", "B011"]  # Allow asserts and magic values in tests
"*/ui/app.py" = ["B008"]  # Allow gr.Progress() default

[tool.ruff.lint.isort]
# Same settings as isort with black profile
known-first-party = ["windsurf_dreambooth"]
combine-as-imports = true
force-sort-within-sections = true

[tool.ruff.lint.pydocstyle]
# Use Google docstring convention
convention = "google"

[tool.ruff.format]
# Use the same formatting as black
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.mypy]
python_version = "3.9"
warn_return_any = false  # Too noisy with ML frameworks
warn_unused_configs = true
disallow_untyped_defs = true  # Good practice
ignore_missing_imports = true
disallow_incomplete_defs = true  # Catch missing annotations
check_untyped_defs = false  # Too strict for gradual typing
disallow_untyped_decorators = false  # Decorators are complex
no_implicit_optional = true  # Good for catching None issues
warn_redundant_casts = true
warn_unused_ignores = true
strict_equality = false  # Can be too restrictive
show_error_codes = true
strict = false

# Ignore complex framework modules entirely
[[tool.mypy.overrides]]
module = [
    "windsurf_dreambooth.config.settings",  # Pydantic Field() issues
    "windsurf_dreambooth.ui.*",             # Gradio typing complexity
    "windsurf_dreambooth.training.*",       # PyTorch/Diffusers complexity
]
ignore_errors = true

# Core modules should have good typing
[[tool.mypy.overrides]]
module = [
    "windsurf_dreambooth.models.manager",
    "windsurf_dreambooth.models.generator",
    "windsurf_dreambooth.utils.*",
    "windsurf_dreambooth.__main__",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true

# API modules with some flexibility
[[tool.mypy.overrides]]
module = "windsurf_dreambooth.api.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=windsurf_dreambooth",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=40",
    "--maxfail=1",
    "--tb=short",
    "--dist=loadgroup",
    # "-n=auto"  # Uncomment to enable parallel testing
]
markers = [
    "slow: marks tests as slow (deselect with '-m not slow')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "model: marks tests that load models (memory intensive)",
    "flaky: marks tests that might fail intermittently",
    "timeout: marks tests with timeout",
    "benchmark: marks tests that measure performance",
    "asyncio: marks tests that use asyncio"
]
# timeout = 300
# timeout_method = "thread"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::FutureWarning",
    "error::UserWarning"
]
# env = [
#     "TESTING=1",
#     "LOG_LEVEL=DEBUG"
# ]

[dependency-groups]
dev = [
    "bandit>=1.8.3",
    "faker>=37.3.0",
    "freezegun>=1.5.1",
    "hypothesis>=6.131.25",
    "mypy",
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "pytest-xdist>=3.6.1",
]
