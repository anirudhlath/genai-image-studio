name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"
  UV_SYSTEM_PYTHON: "1"
  
jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]
        exclude:
          # PyTorch GPU dependencies may have issues on certain combinations
          - os: macos-latest
            python-version: "3.9"
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: |
          **/pyproject.toml
          **/uv.lock
    
    - name: Cache models
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/huggingface
          model_cache
        key: ${{ runner.os }}-models-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-models-
    
    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
    
    - name: Check code formatting with black
      run: |
        uv run black --check windsurf_dreambooth tests
    
    - name: Check import sorting with isort
      run: |
        uv run isort --check-only windsurf_dreambooth tests
    
    - name: Lint with flake8
      run: |
        uv run flake8 windsurf_dreambooth tests
      continue-on-error: true
    
    - name: Type check with mypy
      run: |
        uv run mypy windsurf_dreambooth
      continue-on-error: true
    
    - name: Security check with bandit
      run: |
        uv run bandit -r windsurf_dreambooth -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload bandit report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report-${{ matrix.os }}-${{ matrix.python-version }}
        path: bandit-report.json
    
    - name: Run tests (excluding slow tests)
      env:
        TESTING: "1"
        LOG_LEVEL: "DEBUG"
        HF_HOME: ${{ github.workspace }}/model_cache
        TRANSFORMERS_CACHE: ${{ github.workspace }}/model_cache
        TORCH_HOME: ${{ github.workspace }}/model_cache
      run: |
        uv run pytest -m "not slow" --maxfail=5 --tb=short
    
    - name: Run slow tests (GPU tests)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      env:
        TESTING: "1"
        LOG_LEVEL: "DEBUG"
        HF_HOME: ${{ github.workspace }}/model_cache
        TRANSFORMERS_CACHE: ${{ github.workspace }}/model_cache
        TORCH_HOME: ${{ github.workspace }}/model_cache
      run: |
        uv run pytest -m "slow or gpu or model" --maxfail=2 --tb=short
      continue-on-error: true
    
    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          .coverage
          coverage.xml
          htmlcov/
        retention-days: 7

  docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      if: github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name == 'push' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/windsurf-dreambooth:latest
          ${{ secrets.DOCKER_USERNAME }}/windsurf-dreambooth:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false